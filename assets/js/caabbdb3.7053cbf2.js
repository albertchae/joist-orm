"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3702],{4967:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=s(4246),t=s(1670);const i={title:"Class Table Inheritance",sidebar_position:6},l=void 0,o={id:"advanced/class-table-inheritance",title:"Class Table Inheritance",description:"Joist supports Class Table Inheritance, which allows inheritance/subtyping of entities (like class Dog extends Animal), by automatically mapping single/logical polymorphic entities across separate per-subtype/physical SQL tables.",source:"@site/docs/advanced/class-table-inheritance.md",sourceDirName:"advanced",slug:"/advanced/class-table-inheritance",permalink:"/docs/advanced/class-table-inheritance",draft:!1,unlisted:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/advanced/class-table-inheritance.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Class Table Inheritance",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Lens Traversal",permalink:"/docs/advanced/lenses"},next:{title:"Full Text Search",permalink:"/docs/advanced/full-text-search"}},c={},d=[{value:"Database Representation",id:"database-representation",level:2},{value:"Entity Representation",id:"entity-representation",level:2},{value:"Tagged Ids",id:"tagged-ids",level:2},{value:"Abstract Base Types",id:"abstract-base-types",level:2},{value:"What about Single Table Inheritance?",id:"what-about-single-table-inheritance",level:2},{value:"But Isn&#39;t Inheritance Bad Design?",id:"but-isnt-inheritance-bad-design",level:2}];function r(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Joist supports ",(0,a.jsx)(n.a,{href:"https://www.martinfowler.com/eaaCatalog/classTableInheritance.html",children:"Class Table Inheritance"}),", which allows inheritance/subtyping of entities (like ",(0,a.jsx)(n.code,{children:"class Dog extends Animal"}),"), by automatically mapping single/logical polymorphic entities across separate per-subtype/physical SQL tables."]}),"\n",(0,a.jsx)(n.h2,{id:"database-representation",children:"Database Representation"}),"\n",(0,a.jsxs)(n.p,{children:["For example, lets say we have a ",(0,a.jsx)(n.code,{children:"Dog"})," entity and a ",(0,a.jsx)(n.code,{children:"Cat"})," entity, and we want them to both extend the ",(0,a.jsx)(n.code,{children:"Animal"})," entity."]}),"\n",(0,a.jsxs)(n.p,{children:["For class table inheritance, we represent this in Postgres by having three separate tables: ",(0,a.jsx)(n.code,{children:"animals"}),", ",(0,a.jsx)(n.code,{children:"dogs"}),", and ",(0,a.jsx)(n.code,{children:"cats"}),"."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"animals"})," table has an ",(0,a.jsx)(n.code,{children:"id"})," primary key, with the usual auto increment behavior, and any fields that are common to all ",(0,a.jsx)(n.code,{children:"Animal"}),"s"]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"dogs"})," table also has an ",(0,a.jsx)(n.code,{children:"id"})," primary key, but it does ",(0,a.jsx)(n.em,{children:"not"})," auto-increment, and is instead a foreign key to ",(0,a.jsx)(n.code,{children:"animals.id"}),", and has any fields that are unique to the ",(0,a.jsx)(n.code,{children:"Dog"})," entity"]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"cats"})," table also has an ",(0,a.jsx)(n.code,{children:"id"})," primary key, again it does ",(0,a.jsx)(n.em,{children:"not"})," auto-increment, and is instead a foreign key to ",(0,a.jsx)(n.code,{children:"animals.id"}),", and has any fields that are unique to the ",(0,a.jsx)(n.code,{children:"Cat"})," entity"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["If you're using Joist's ",(0,a.jsx)(n.code,{children:"migration-utils"}),", this might look like:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'createEntityTable(b, "animals", {\n  name: "text",\n})\ncreateSubTable(b, "animals", "dogs", {\n  can_bark: "boolean",\n});\ncreateSubTable(b, "animals", "cats", {\n  can_meow: "boolean",\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"entity-representation",children:"Entity Representation"}),"\n",(0,a.jsxs)(n.p,{children:["When ",(0,a.jsx)(n.code,{children:"joist-codegen"})," sees that ",(0,a.jsx)(n.code,{children:"dogs.id"})," is actually a foreign key to ",(0,a.jsx)(n.code,{children:"animals.id"}),", Joist will ensure that the ",(0,a.jsx)(n.code,{children:"Dog"})," model extends the ",(0,a.jsx)(n.code,{children:"Animal"})," model."]}),"\n",(0,a.jsx)(n.p,{children:"Note that because of the codegen entities, which contain the getter/setter boilerplate, it will actually end up looking like:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// in AnimalCodegen.ts\nabstract class AnimalCodegen extends BaseEntity {\n  name: string;\n}\n\n// in Animal.ts\nclass Animal extends AnimalCodegen {\n  // any custom logic\n}\n\n// in DogCodegen.ts\nabstract class DogCodegen extends Animal {\n  can_bark: boolean;\n}\n\n// in Dog.ts\nclass Dog extends DogCodegen {\n  // any custom logic\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And when you load several ",(0,a.jsx)(n.code,{children:"Animal"}),"s, Joist will automatically probe the ",(0,a.jsx)(n.code,{children:"dogs"})," and ",(0,a.jsx)(n.code,{children:"cats"})," tables (by using a ",(0,a.jsx)(n.code,{children:"LEFT OUTER JOIN"})," to each subtype table) and create entities of the right type:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const [a1, a2] = await em.loadAll(Animal, ["a:1", "a:2"]);\n// If a1 was saved as a dog, it will be a Dog\nexpect(a1).toBeInstanceOf(Dog);\n// if a2 was saved as a cit, it will be a Cat\nexpect(a2).toBeInstanceOf(Cat);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Similarly, if you save a ",(0,a.jsx)(n.code,{children:"Dog"})," entity, Joist will automatically split the entity's data across both tables, putting the ",(0,a.jsx)(n.code,{children:"name"})," into ",(0,a.jsx)(n.code,{children:"animals"})," and ",(0,a.jsx)(n.code,{children:"can_bark"})," into ",(0,a.jsx)(n.code,{children:"dogs"}),", with the same ",(0,a.jsx)(n.code,{children:"id"})," value for both rows:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const dog = em.create(Dog, {\n  name: "doge",\n  can_bark: true,\n});\n// Generates both `INSERT INTO animals ...` and\n// `INSERT INTO dogs ...`.\nawait em.flush();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"tagged-ids",children:"Tagged Ids"}),"\n",(0,a.jsx)(n.p,{children:"Currently, subtypes share the same tagged id as the base type."}),"\n",(0,a.jsxs)(n.p,{children:["For example, ",(0,a.jsx)(n.code,{children:"dog1.id"})," returns ",(0,a.jsx)(n.code,{children:"a:1"})," because the ",(0,a.jsx)(n.code,{children:"Dog"}),"'s base type is ",(0,a.jsx)(n.code,{children:"Animal"}),", and all ",(0,a.jsx)(n.code,{children:"Animal"}),"s (regardless of whether they're ",(0,a.jsx)(n.code,{children:"Dog"}),"s or ",(0,a.jsx)(n.code,{children:"Cat"}),"s) use the ",(0,a.jsx)(n.code,{children:"a"})," tag."]}),"\n",(0,a.jsxs)(n.p,{children:["Joist might someday support per-subtype tags, but it would be complicated b/c we don't always know the subtype of an id; e.g. if there is a ",(0,a.jsx)(n.code,{children:"pet_owners.animal_id"})," foreign key, and it points to either ",(0,a.jsx)(n.code,{children:"Dog"}),"s or ",(0,a.jsx)(n.code,{children:"Cat"}),"s, when loading the row ",(0,a.jsx)(n.code,{children:"PetOwner:123"})," it's impossible to know if the tagged id its ",(0,a.jsx)(n.code,{children:"animal_id"})," value should be ",(0,a.jsx)(n.code,{children:"d:1"})," or ",(0,a.jsx)(n.code,{children:"c:1"})," without first probing the ",(0,a.jsx)(n.code,{children:"dogs"})," and ",(0,a.jsx)(n.code,{children:"cats"})," tables, which takes extra SQL calls to do. So for now it's simplest/most straightforward to just share the same tag across the subtypes."]}),"\n",(0,a.jsx)(n.h2,{id:"abstract-base-types",children:"Abstract Base Types"}),"\n",(0,a.jsxs)(n.p,{children:["If you'd like to enforce that base type is abstract, i.e. that users cannot instantiate ",(0,a.jsx)(n.code,{children:"Animal"}),", they must instantiate either a ",(0,a.jsx)(n.code,{children:"Dog"})," or ",(0,a.jsx)(n.code,{children:"Cat"}),", then you can mark ",(0,a.jsx)(n.code,{children:"Animal"})," as ",(0,a.jsx)(n.code,{children:"abstract"})," in the ",(0,a.jsx)(n.code,{children:"joist-config.json"})," file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n "entities": {\n    "Animal": {\n       "tag": "a",\n       "abstract": true\n    }\n }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You also need to manually update the ",(0,a.jsx)(n.code,{children:"Animal.ts"})," file to make the class ",(0,a.jsx)(n.code,{children:"abstract"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"export abstract class Animal extends AnimalCodegen {}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["After this, Joist will enforce that all ",(0,a.jsx)(n.code,{children:"Animal"}),"s must be either ",(0,a.jsx)(n.code,{children:"Dog"}),"s or ",(0,a.jsx)(n.code,{children:"Cat"}),"s."]}),"\n",(0,a.jsxs)(n.p,{children:["For example, if an ",(0,a.jsx)(n.code,{children:'em.load(Animal, "a:1")'})," finds a row only in the ",(0,a.jsx)(n.code,{children:"animals"})," table, and no matching row in the ",(0,a.jsx)(n.code,{children:"dogs"})," or ",(0,a.jsx)(n.code,{children:"cats"})," table, then the ",(0,a.jsx)(n.code,{children:"em.load"})," method will fail with an error message."]}),"\n",(0,a.jsx)(n.h2,{id:"what-about-single-table-inheritance",children:"What about Single Table Inheritance?"}),"\n",(0,a.jsxs)(n.p,{children:["An alternative to Class Table Inheritance (CTI) is ",(0,a.jsx)(n.a,{href:"https://www.martinfowler.com/eaaCatalog/singleTableInheritance.html",children:"Single Table Inheritance"})," (STI), where ",(0,a.jsx)(n.code,{children:"Dog"}),"s and ",(0,a.jsx)(n.code,{children:"Cat"}),"s don't have their own tables, but have their subtype-specific fields stored directly on the ",(0,a.jsx)(n.code,{children:"animals"})," table (e.g. both ",(0,a.jsx)(n.code,{children:"animals.can_bark"})," and ",(0,a.jsx)(n.code,{children:"animals.can_meow"})," would be columns directly in the ",(0,a.jsx)(n.code,{children:"animals"})," table even though, for dogs, the ",(0,a.jsx)(n.code,{children:"can_meow"})," column is not applicable)."]}),"\n",(0,a.jsx)(n.p,{children:"Joist currently does not support STI, generally because CTI has several pros:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"With CTI, the database schema makes it obvious what the class hierarchy should be."}),"\n",(0,a.jsxs)(n.p,{children:["Given how schema-driven Joist's ",(0,a.jsx)(n.code,{children:"joist-codegen"})," is, it's very convenient to have the per-type fields already split out (into separate tables) and then to use the ",(0,a.jsx)(n.code,{children:"id"})," foreign keys to discover the ",(0,a.jsx)(n.code,{children:"extends"})," relationships."]}),"\n",(0,a.jsxs)(n.p,{children:['With STI, this sort of "obvious" visibility does not exist, and we\'d have to encode the type hierarchy in ',(0,a.jsx)(n.code,{children:"joist-config.json"}),", i.e. some sort of mapping that says ",(0,a.jsx)(n.code,{children:"animals.can_bark"})," is only applicable for the ",(0,a.jsx)(n.code,{children:"Dog"})," subtype, and ",(0,a.jsx)(n.code,{children:"animals.can_meow"})," is only applicable for the ",(0,a.jsx)(n.code,{children:"Cat"})," subtype."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"With CTI, the schema is safer, because the subtype-only columns can have not-null constraints."}),"\n",(0,a.jsxs)(n.p,{children:["With STI, even if ",(0,a.jsx)(n.code,{children:"can_bark"})," is required for all ",(0,a.jsx)(n.code,{children:"Dog"}),"s, because there will be ",(0,a.jsx)(n.code,{children:"Cat"})," rows in the ",(0,a.jsx)(n.code,{children:"animals"})," table that just fundamentally cannot have a ",(0,a.jsx)(n.code,{children:"can_bark"})," value, the column must be nullable."]}),"\n",(0,a.jsxs)(n.p,{children:["Which is fine if it's already nullable, but if you wanted it to be non-null, now we have to encode in ",(0,a.jsx)(n.code,{children:"joist-config.json"})," that it is ",(0,a.jsx)(n.em,{children:"technically"})," required, and rely on Joist's runtime code to enforce it."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"With CTI, we can have foreign keys directly to subtypes."}),"\n",(0,a.jsxs)(n.p,{children:["For example, we could have a ",(0,a.jsx)(n.code,{children:"DogCollar"})," entity that had a ",(0,a.jsx)(n.code,{children:"dog_collars.dog_id"})," foreign key that points ",(0,a.jsx)(n.em,{children:"only"})," to ",(0,a.jsx)(n.code,{children:"dogs"}),", and is fundamentally unable to point to ",(0,a.jsx)(n.code,{children:"Cat"}),"s."]}),"\n",(0,a.jsx)(n.p,{children:"With STI, it's not possible in the database to represent/enforce that FKs are only valid for a specific subtype."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["That said, the pro of STI is that you don't need ",(0,a.jsx)(n.code,{children:"LEFT OUTER JOIN"}),"s to load entities, b/c all data for all subtypes is a single table, so Joist could likely support STI someday, it just does not currently."]}),"\n",(0,a.jsx)(n.h2,{id:"but-isnt-inheritance-bad-design",children:"But Isn't Inheritance Bad Design?"}),"\n",(0,a.jsx)(n.p,{children:'Yes, inheritance can be abused, particularly with deep inheritance hierarchies and/or just "bad design".'}),"\n",(0,a.jsx)(n.p,{children:"But when you have a situation that fits it well, it can be an appropriate/valid way to design a schema, at your own choice/discretion."}),"\n",(0,a.jsx)(n.p,{children:'If it helps, inheritance can also be thought of Abstract Data Types, which as a design pattern is generally considered a modern/"good" approach for accurately & type-safely modeling values that have different fields based on their current kind/type.'}),"\n",(0,a.jsx)(n.p,{children:"ADTs also focus just on the per-kind/per-type data attributes, and less on the polymorphic behavior of methods encoded/implemented within the class hierarchy which was the focus of traditional OO-based inheritance."}),"\n",(0,a.jsx)(n.p,{children:'When using inheritance with Joist entities, you can pick whichever approach you prefer: either more "just data" ADT-ish inheritance or "implementation-hiding methods" OO-ish inheritance.'})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}},1670:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>l});var a=s(7378);const t={},i=a.createContext(t);function l(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);